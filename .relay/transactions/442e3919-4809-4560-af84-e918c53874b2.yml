uuid: 442e3919-4809-4560-af84-e918c53874b2
projectId: google-ai-studio-notification
createdAt: '2025-08-05T13:59:43.033Z'
linesAdded: 7
linesRemoved: 3
gitCommitMsg: 'fix(ts): correct types and import paths'
promptSummary: >-
  User reported TypeScript errors. The errors were caused by an incorrect import
  path after refactoring type definitions and implicit 'any' types in a reduce
  function. I am fixing both issues.
reasoning:
  - >-
    Of course. I've spotted the TypeScript errors and will correct them now. The
    issues are due to implicit `any` types in a `reduce` function and an
    incorrect import path after the recent refactoring.
  - >-
    First, I'll fix the import path in `src/content/constants.ts` to point to
    the new centralized `types.ts` file.
  - >-
    Next, I'll explicitly type the parameters in the `reduce` function within
    `src/content/Indicator.tsx` to resolve the `noImplicitAny` errors.
  - These changes should resolve all the reported TypeScript errors.
operations:
  - type: write
    path: src/content/constants.ts
    content: |-
      <<<<<<< SEARCH
      import type { Status } from './types';
      =======
      import type { Status } from '../types';
      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
  - type: write
    path: src/content/Indicator.tsx
    content: |-
      <<<<<<< SEARCH
        const totalDuration = historyTabs.reduce(
          (sum, tab) =>
            sum + tab.history.reduce((tabSum, run) => tabSum + run.durationMs, 0),
          0
        );
      =======
        const totalDuration = historyTabs.reduce(
          (sum: number, tab: TabState) =>
            sum +
            tab.history.reduce(
              (tabSum: number, run: RunHistoryEntry) => tabSum + run.durationMs,
              0
            ),
          0
        );
      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
snapshot:
  src/content/constants.ts: |-
    import type { Status } from './types';

    export const statusConfig: Record<
      Status,
      { bgColor: string; text: string; animate: boolean }
    > = {
      monitoring: {
        bgColor: 'bg-blue-500',
        text: 'Monitoring',
        animate: false,
      },
      running: {
        bgColor: 'bg-green-500',
        text: 'Process Running',
        animate: true,
      },
      stopped: {
        bgColor: 'bg-yellow-500',
        text: 'Process Finished!',
        animate: false,
      },
      error: {
        bgColor: 'bg-red-500',
        text: 'Error!',
        animate: false,
      },
      paused: {
        bgColor: 'bg-orange-500',
        text: 'Paused',
        animate: false,
      },
    };
  src/content/Indicator.tsx: |-
    import { useRef, useEffect, useState } from 'react';
    import { useDrag } from './useDrag';
    import { statusConfig } from './constants';
    import type { IndicatorProps, RunHistoryEntry, TabState } from '../types';

    function formatElapsedTime(ms: number): string {
      if (ms <= 0) return '00:00';
      const totalSeconds = Math.floor(ms / 1000);
      const minutes = Math.floor(totalSeconds / 60);
      const seconds = totalSeconds % 60;
      const paddedMinutes = String(minutes).padStart(2, '0');
      const paddedSeconds = String(seconds).padStart(2, '0');
      return `${paddedMinutes}:${paddedSeconds}`;
    }

    function HistoryEntry({
      entry,
      onClick,
    }: {
      entry: RunHistoryEntry;
      onClick: () => void;
    }) {
      return (
        <div
          className="flex items-center justify-between text-xs px-2 py-1 hover:bg-white/10 rounded cursor-pointer"
          onClick={onClick}
        >
          <div className="flex items-center gap-2">
            <span
              className={
                entry.status === 'stopped' ? 'text-green-400' : 'text-red-400'
              }
            >
              {entry.status === 'stopped' ? '✔' : '✖'}
            </span>
            <span className="truncate max-w-[180px] text-gray-300">
              {entry.runName || 'Untitled Run'}
            </span>
          </div>
          <span className="font-mono text-gray-400">
            {formatElapsedTime(entry.durationMs)}
          </span>
        </div>
      );
    }

    function TabHistory({
      tabState,
      onNavigate,
    }: {
      tabState: TabState;
      onNavigate: (tabId: number, windowId: number) => void;
    }) {
      if (tabState.history.length === 0) return null;

      return (
        <div className="mt-2">
          <div
            className="text-xs font-bold text-gray-200 px-2 py-1 cursor-pointer hover:underline truncate"
            onClick={() => onNavigate(tabState.tabId, tabState.windowId)}
            title={tabState.history[0].runName || `Tab ${tabState.tabId}`}
          >
            Tab: {tabState.history[0].runName || `Tab ${tabState.tabId}`}
          </div>
          <div className="flex flex-col gap-0.5">
            {tabState.history.map((entry) => (
              <HistoryEntry
                key={entry.id}
                entry={entry}
                onClick={() => onNavigate(tabState.tabId, tabState.windowId)}
              />
            ))}
          </div>
        </div>
      );
    }

    function Indicator({
      currentTabState,
      allTabsState,
      onPauseResume,
      onClose,
      onNavigate,
    }: IndicatorProps) {
      const indicatorRef = useRef<HTMLDivElement>(null);
      const { position, handleMouseDown } = useDrag(indicatorRef);
      const [isExpanded, setIsExpanded] = useState(false);
      const audioRef = useRef<HTMLAudioElement | null>(null);

      useEffect(() => {
        // Preload audio element when component mounts
        const soundUrl = chrome.runtime.getURL('notification.mp3');
        audioRef.current = new Audio(soundUrl);
      }, []);

      useEffect(() => {
        if (currentTabState?.status === 'stopped') {
          audioRef.current
            ?.play()
            .catch((err) => console.error('Audio play failed: ', err));
        }
      }, [currentTabState?.status]);

      if (!currentTabState) {
        return null;
      }

      const config = statusConfig[currentTabState.status];
      const isPausable =
        currentTabState.status === 'running' ||
        currentTabState.status === 'paused' ||
        currentTabState.status === 'monitoring';

      const historyTabs = Object.values(allTabsState)
        .filter((tab) => tab.history.length > 0)
        .sort((a, b) => {
          const aLast = a.history[0]?.endTime ?? 0;
          const bLast = b.history[0]?.endTime ?? 0;
          return bLast - aLast;
        });

      const totalRuns = historyTabs.reduce(
        (sum, tab) => sum + tab.history.length,
        0
      );
      const totalDuration = historyTabs.reduce(
        (sum, tab) =>
          sum + tab.history.reduce((tabSum, run) => tabSum + run.durationMs, 0),
        0
      );
      const avgDuration = totalRuns > 0 ? totalDuration / totalRuns : 0;

      return (
        <div
          ref={indicatorRef}
          className="fixed top-0 left-0 z-[99999] rounded-lg shadow-lg text-white font-sans select-none w-64"
          style={{
            transform: `translate3d(${position.x}px, ${position.y}px, 0)`,
            backgroundColor: 'rgba(20, 20, 20, 0.8)',
            backdropFilter: 'blur(4px)',
          }}
        >
          <div
            className="flex items-center gap-3 p-2 cursor-grab"
            onMouseDown={handleMouseDown}
          >
            <div className="flex items-center gap-2 flex-grow min-w-0">
              <span
                className={`w-3 h-3 rounded-full flex-shrink-0 ${config.bgColor} ${
                  config.animate ? 'animate-pulse' : ''
                }`}
              ></span>
              <span className="text-sm font-medium truncate">
                {currentTabState.runName
                  ? currentTabState.runName
                  : config.text}
              </span>
              {(currentTabState.status === 'running' ||
                currentTabState.status === 'paused' ||
                currentTabState.status === 'stopped') && (
                <span className="text-sm font-mono text-gray-300">
                  {formatElapsedTime(currentTabState.elapsedTime)}
                </span>
              )}
            </div>
            <div className="flex items-center flex-shrink-0">
              {isPausable && (
                <button
                  onClick={onPauseResume}
                  className="text-gray-400 hover:text-white cursor-pointer p-1 rounded-full"
                  title={currentTabState.status === 'paused' ? 'Resume' : 'Pause'}
                >
                  {currentTabState.status === 'running' ||
                  currentTabState.status === 'monitoring' ? (
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="12"
                      height="12"
                      viewBox="0 0 24 24"
                      fill="currentColor"
                      className="block"
                    >
                      <path d="M14 19h4V5h-4v14zm-8 0h4V5H6v14z" />
                    </svg>
                  ) : (
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="12"
                      height="12"
                      viewBox="0 0 24 24"
                      fill="currentColor"
                      className="block"
                    >
                      <path d="M8 5v14l11-7z" />
                    </svg>
                  )}
                </button>
              )}
              {historyTabs.length > 0 && (
                <button
                  onClick={() => setIsExpanded(!isExpanded)}
                  className="text-gray-400 hover:text-white cursor-pointer p-1 rounded-full"
                  title={isExpanded ? 'Collapse History' : 'Expand History'}
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="12"
                    height="12"
                    viewBox="0 0 24 24"
                    fill="currentColor"
                    className="block transition-transform"
                    style={{ transform: isExpanded ? 'rotate(180deg)' : 'none' }}
                  >
                    <path d="M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6z" />
                  </svg>
                </button>
              )}
              <button
                onClick={onClose}
                className="text-gray-400 hover:text-white cursor-pointer p-1 rounded-full"
                title="Hide Indicator"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="12"
                  height="12"
                  viewBox="0 0 24 24"
                  fill="currentColor"
                  className="block"
                >
                  <path d="M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z" />
                </svg>
              </button>
            </div>
          </div>
          {currentTabState.status === 'error' && currentTabState.error && (
            <p className="text-xs text-red-400 px-2 pb-2 -mt-1">
              {currentTabState.error}
            </p>
          )}

          {/* Expanded History View */}
          {isExpanded && (
            <div className="p-2 border-t border-white/10">
              {historyTabs.length > 0 ? (
                <>
                  <div className="flex justify-between items-baseline px-2 pb-2">
                    <h3 className="text-sm font-bold">Run History</h3>
                    <p className="text-xs text-gray-400">
                      Avg: {formatElapsedTime(avgDuration)}
                    </p>
                  </div>
                  <div className="max-h-60 overflow-y-auto pr-1">
                    {historyTabs.map((tabState) => (
                      <TabHistory
                        key={tabState.tabId}
                        tabState={tabState}
                        onNavigate={onNavigate}
                      />
                    ))}
                  </div>
                </>
              ) : (
                <p className="text-xs text-gray-400 text-center py-2">
                  No completed runs in this session.
                </p>
              )}
            </div>
          )}
        </div>
      );
    }

    export default Indicator;
approved: true
