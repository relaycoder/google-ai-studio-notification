uuid: 4f30500a-1a87-43c7-9576-7935de98471e
projectId: google-ai-studio-notification
createdAt: '2025-08-03T10:11:00.281Z'
linesAdded: 108
linesRemoved: 10
gitCommitMsg: 'feat: implement interactive notifications with actions'
promptSummary: >-
  The user wants to enhance the Chrome extension's notifications. The new
  requirements are: the notification should be auto-dismissible, it should
  include 'view', 'dismiss', and 'remind' action buttons, and clicking the
  'view' button should focus the browser tab where the event occurred.
reasoning:
  - >-
    Of course. I'll upgrade the notification system to be more interactive and
    meet your requirements. Here are the modifications.
  - >-
    I'll start by updating `src/manifest.json` to include the necessary
    permissions for the new features. We'll need `tabs` to focus the correct
    tab, `alarms` to schedule reminders, and `storage` to persist information
    for those reminders.
  - >-
    Next, I'll completely overhaul the `src/background.ts` script. The new
    version will:
  - >-
    1.  Create notifications with "View", "Dismiss", and "Remind" action
    buttons.
  - 2.  Store the context (tab and window ID) of where the process finished.
  - '3.  Handle clicks on the action buttons:'
  - '*   **View**: Focuses the original tab.'
  - '*   **Dismiss**: Closes the notification.'
  - >-
    *   **Remind**: Uses the `chrome.alarms` API to show the notification again
    in 5 minutes.
  - >-
    4.  Include listeners to properly clean up data when notifications are
    closed or alarms are handled, preventing memory leaks.
  - >-
    5.  Set `requireInteraction: false` as requested to allow notifications to
    be auto-dismissed if the user doesn't interact with them.
  - >-
    These changes implement the requested notification features, making the
    extension more powerful and user-friendly.
operations:
  - type: write
    path: src/manifest.json
    content: |-
      <<<<<<< SEARCH
        "permissions": [
          "notifications"
        ],
      =======
        "permissions": [
          "notifications",
          "tabs",
          "alarms",
          "storage"
        ],
      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
  - type: write
    path: src/background.ts
    content: >-
      interface NotificationContext {
        tabId: number;
        windowId: number;
      }


      // Map to hold context for active notifications

      const notificationContexts = new Map<string, NotificationContext>();


      /**
       * Creates and displays a desktop notification.
       * @param context - The context containing the tab and window IDs.
       */
      function createNotification(context: NotificationContext) {
        // The notificationId is guaranteed to be unique for the session.
        // We can use it as the base for the alarm name.
        chrome.notifications.create(
          {
            type: 'basic',
            iconUrl: 'assets/icon128.png',
            title: 'AI Studio',
            message: 'Your process has finished!',
            priority: 2,
            // `requireInteraction: false` is the default. It means the notification
            // will auto-dismiss after a short time. On some OSes (like Windows),
            // notifications with buttons may persist in an action center regardless.
            requireInteraction: false,
            buttons: [
              { title: 'View' },
              { title: 'Dismiss' },
              { title: 'Remind in 5 mins' },
            ],
          },
          (notificationId) => {
            if (notificationId) {
              notificationContexts.set(notificationId, context);
            }
          }
        );
      }


      // Listen for messages from the content script

      chrome.runtime.onMessage.addListener((message, sender) => {
        if (message.type === 'processFinished') {
          console.log('Background script received processFinished message.');

          if (sender.tab?.id && sender.tab?.windowId) {
            createNotification({
              tabId: sender.tab.id,
              windowId: sender.tab.windowId,
            });
          } else {
            console.error(
              'Could not create notification: sender tab details are missing.'
            );
          }
        }
      });


      // Listener for when a user clicks a button on the notification

      chrome.notifications.onButtonClicked.addListener(
        (notificationId, buttonIndex) => {
          const context = notificationContexts.get(notificationId);
          if (!context) {
            return;
          }

          switch (buttonIndex) {
            case 0: // View
              chrome.windows.update(context.windowId, { focused: true });
              chrome.tabs.update(context.tabId, { active: true });
              // Clearing the notification will trigger the onClosed listener for cleanup
              chrome.notifications.clear(notificationId);
              break;
            case 1: // Dismiss
              chrome.notifications.clear(notificationId);
              break;
            case 2: // Remind
              {
                const alarmName = `remind-${notificationId}`;
                // Store context for when the alarm fires
                chrome.storage.local.set({ [alarmName]: context }).then(() => {
                  chrome.alarms.create(alarmName, { delayInMinutes: 5 });
                  chrome.notifications.clear(notificationId);
                });
              }
              break;
          }
        }
      );


      // Listener for when a notification is closed (programmatically or by
      user)

      // This is crucial for cleaning up the context map to prevent memory
      leaks.

      chrome.notifications.onClosed.addListener((notificationId) => {
        notificationContexts.delete(notificationId);
        console.log(`Cleaned up context for closed notification: ${notificationId}`);
      });


      // Listener for alarms (for the "Remind" feature)

      chrome.alarms.onAlarm.addListener(async (alarm) => {
        if (alarm.name.startsWith('remind-')) {
          const data = await chrome.storage.local.get(alarm.name);
          const context = data[alarm.name];

          if (context) {
            console.log(`Re-creating notification from alarm: ${alarm.name}`);
            createNotification(context);
            // Clean up the storage
            await chrome.storage.local.remove(alarm.name);
          }
        }
      });
    patchStrategy: replace
snapshot:
  src/background.ts: |
    // Listen for messages from the content script
    chrome.runtime.onMessage.addListener((message: { type: string }) => {
      if (message.type === 'processFinished') {
        console.log('Background script received processFinished message.');

        // Create a desktop notification
        chrome.notifications.create({
          type: 'basic',
          iconUrl: 'assets/icon128.png', // An icon is required for basic notifications
          title: 'AI Studio',
          message: 'Your process has finished!',
          priority: 2, // High priority
        });
      }
    });
  src/manifest.json: |-
    {
      "manifest_version": 3,
      "name": "AI Studio Notifier",
      "version": "1.2.0",
      "description": "Plays a sound and shows a notification when a process in Google AI Studio finishes.",
      "permissions": [
        "notifications"
      ],
      "host_permissions": [
        "https://aistudio.google.com/*"
      ],
      "background": {
        "service_worker": "background.js"
      },
      "content_scripts": [
        {
          "matches": ["https://aistudio.google.com/*"],
          "js": ["content.js"]
        }
      ],
      "web_accessible_resources": [
        {
          "resources": ["assets/*"],
          "matches": ["https://aistudio.google.com/*"]
        }
      ],
      "icons": {
        "48": "assets/icon48.png",
        "128": "assets/icon128.png"
      }
    }
approved: true
